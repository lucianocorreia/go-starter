// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: user.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
        username,
        hashed_password,
        name,
        email,
        is_active,
        tenant_id
    )
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, created_at, updated_at, username, hashed_password, name, email, password_changed_at, is_active, tenant_id
`

type CreateUserParams struct {
	Username       string      `json:"username"`
	HashedPassword string      `json:"hashed_password"`
	Name           string      `json:"name"`
	Email          string      `json:"email"`
	IsActive       bool        `json:"is_active"`
	TenantID       pgtype.Text `json:"tenant_id"`
}

func (q *Queries) CreateUser(ctx context.Context, arg *CreateUserParams) (*User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Username,
		arg.HashedPassword,
		arg.Name,
		arg.Email,
		arg.IsActive,
		arg.TenantID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.HashedPassword,
		&i.Name,
		&i.Email,
		&i.PasswordChangedAt,
		&i.IsActive,
		&i.TenantID,
	)
	return &i, err
}

const getUser = `-- name: GetUser :one
SELECT id, created_at, updated_at, username, hashed_password, name, email, password_changed_at, is_active, tenant_id
FROM users
WHERE email = $1
LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, email string) (*User, error) {
	row := q.db.QueryRow(ctx, getUser, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.HashedPassword,
		&i.Name,
		&i.Email,
		&i.PasswordChangedAt,
		&i.IsActive,
		&i.TenantID,
	)
	return &i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, created_at, updated_at, username, hashed_password, name, email, password_changed_at, is_active, tenant_id
FROM users
ORDER BY name
LIMIT $1
OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg *ListUsersParams) ([]*User, error) {
	rows, err := q.db.Query(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Username,
			&i.HashedPassword,
			&i.Name,
			&i.Email,
			&i.PasswordChangedAt,
			&i.IsActive,
			&i.TenantID,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
